<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variable


vsp = 0;
hsp = 0;
hsp_carry = 0;
normal_grav = 0.3;
grav = normal_grav;
wall_grav = 0.2;
movespeed_normal = 4;
movespeed_powerup = 8;
movespeed = movespeed_normal;
jumpspeed_normal = 8;
jumpspeed_powerup = 14;
jumpspeed = jumpspeed_normal
jumps = 0;
jumpsmax = 1;
wall_stick = 1;

rightwall = true;
leftwall = true;
walljump = true;

if (global.checkpointR == room)
{
    x = global.checkpointx;
    y = global.checkpointy;
}

key_down = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>movespeed = movespeed_normal;
sprite_index = spr_player;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>jumpspeed = jumpspeed_normal;
sprite_index = spr_player;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Player's input

key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_jump = keyboard_check_pressed(vk_space);
key_down = keyboard_check(vk_down);


//movement

move = key_right + key_left;
hsp = move * movespeed;

//Resetting jumps and wall jump abilities when on the ground
if (place_meeting(x, y + 1, obj_wall))
{
   jumps = jumpsmax;
   leftwall = true;
   rightwall = true;
   grav = normal_grav;
}
else
{
    jumps -= 1;
}

//Condition to turn on and off depending on if I'm jumping onto a wall or standing next to a wall.
if((place_meeting(x,y+1,obj_wall)))
{
    wall_stick = 1;
}
if(((place_meeting(x+1,y,obj_wall)) || (place_meeting(x-1,y,obj_wall))) &amp;&amp; (place_meeting(x,y+1,obj_wall)))
{
    wall_stick = 0;
}


if(wall_stick = 1)//Checking to see if on the ground and on wall
{
    //Setting wall jump gravity to kick in only when on the wall
    if((!place_meeting(x,y+1,obj_wall))&amp;&amp; (place_meeting(x + 1,y,obj_wall) || place_meeting(x-1,y,obj_wall)))
    {
        vsp = 0;
        grav = wall_grav;
    }
}

//Falling after reaching close to ground
if(place_meeting(x, y + 54, obj_wall))
{
    grav = normal_grav;
}

//Falling effect.
if (vsp &lt; 10) 
{
    vsp += grav;
}

//Allows the character to perform a wall jump if one of the walls is able to be wall jumped
if(leftwall || rightwall) 
{
    walljump = true;
}

//Regular jumping
if ((key_jump) &amp;&amp; (jumps &gt; 0))
{
    jumps -= 1;
    vsp = -jumpspeed;
}


//Wall Jump algorithm
if(!place_meeting(x,y+1,obj_wall) &amp;&amp; (walljump))
{
    if (((key_jump) &amp;&amp; (place_meeting(x + 1,y,obj_wall))) || ((key_jump) &amp;&amp; (place_meeting(x-1,y,obj_wall))))
    {
        grav = normal_grav; //setting the gravity to normal when in air.
        
        if(rightwall)
        {
            if(place_meeting(x + 1,y,obj_wall) &amp;&amp; key_jump)
            {
                hsp += -jumpspeed - 25;
                vsp += -jumpspeed + 2;
                rightwall = false;
                leftwall = true;
            }
        }
        if(leftwall)
        {
            if(place_meeting(x - 1,y,obj_wall) &amp;&amp; key_jump)
            {
                hsp += jumpspeed + 25;
                vsp += -jumpspeed + 2;
                leftwall = false;
                rightwall = true;
            }
        }
    }

}

//Horizontal speed
var hsp_final = hsp + hsp_carry; 
hsp_carry = 0;

//Horizontal Collision check
if(place_meeting(x + hsp_final, y, obj_wall))
{
    while(!place_meeting(x + sign(hsp_final), y, obj_wall))
    {
        x += sign(hsp_final);
    }
        
    hsp_final = 0;
    

}


//Vertical Collision Check
if(place_meeting(x, y+ vsp, obj_wall))
{
    while(!place_meeting(x, y + sign(vsp), obj_wall))
    {
        y += sign(vsp);
    }
        
    vsp = 0;
}

//Actual movement on screen
x += hsp_final;
y += vsp;

//Death when off screen
if((obj_player.y - 16) &gt; room_height)
{
    scr_death();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
